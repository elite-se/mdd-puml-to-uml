modeltype UML uses "http://www.eclipse.org/uml2/5.0.0/UML";
modeltype PlantUML uses "http://www.mdd.elite/plantuml/PlantUML";

transformation PlantUMLToUMLTransformation(in source: PlantUML, out target: UML);

main() {
	object UML::Model {
		var diagrams = source.rootObjects()[Diagram];
		name := diagrams -> iterate( i: Diagram; newName : String = '' | 
			newName 
			+ (if i.elements[TitleDefinition]->isEmpty() then 'Unnamed Model' else '' endif) 
			+ i.elements[TitleDefinition] -> iterate ( t: TitleDefinition; newTitle : String = '' |
				newTitle + t.titleParts -> iterate ( tp: String; wholeTitle : String = '' |
					wholeTitle 
					+ (if wholeTitle = '' then '' else ' ' endif)
					+ tp
				)
			)
		);
		packagedElement := diagrams -> map toInteraction();
	};
}

mapping Diagram::toInteraction(): Interaction {
	lifeline := self.elements[ParticipantDefinition].participant -> map toLifeline();
	message += self.elements[MessageDefinition] -> map toUMLMessage();
}

mapping ReplyMessageDefinition::test(out message : UML::Message, out sendOccurence : UML::MessageOccurrenceSpecification) {
	message.name := self.message.name;
	sendOccurence.message := message;
}

mapping Participant::toLifeline(): Lifeline {
	name := self.name;
}

mapping MessageDefinition::toUMLMessage() : UML::Message disjuncts 
RequestMessageDefinition::toUMLMessage,
ReplyMessageDefinition::toUMLMessage {
	
}

mapping MessageDefinition::senderAndReceiver(): UML::Message {
	var parentInteraction := self.container().oclAsType(PlantUML::Diagram).resolveone(UML::Interaction);
	var sendOccurence := object MessageOccurrenceSpecification { 
		message := result;
		covered := self.sender.resolveone(UML::Lifeline);
		interaction := parentInteraction;
	};
	var receiveOccurence := object MessageOccurrenceSpecification {
		message := result;
		covered := self.receiver.resolve(UML::Lifeline);
		interaction := parentInteraction;
	};
	sendEvent := sendOccurence;
	receiveEvent := receiveOccurence;
	parentInteraction.fragment += sendOccurence;
	parentInteraction.fragment += receiveOccurence;
}

mapping RequestMessageDefinition::toUMLMessage(): UML::Message inherits
MessageDefinition::senderAndReceiver {
	messageSort := MessageSort::synchCall;
}

mapping ReplyMessageDefinition::toUMLMessage(): UML::Message inherits
MessageDefinition::senderAndReceiver {
	messageSort := MessageSort::reply;
}

