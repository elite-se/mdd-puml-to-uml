grammar elite.mdd.plantuml.PlantUML with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore


generate plantUML "http://www.mdd.elite/plantuml/PlantUML"

Diagram:
	'@startuml' (elements+=SequenceElement)+ '@enduml';
	
SequenceElement:
	ParticipantDefinition
	| MessageDefinition
	| TitleDefinition;
	
// Participants
	
ParticipantDefinition:
	shape=ParticipantShape participant=Participant;
	
Participant:
	NamedParticipant | UnnamedParticipant | AnonymousParticipant |{Participant} name = 'self' ;
	
NamedParticipant returns Participant:
	{NamedParticipant} '"' label=ID ('['selector=ID']')? (':' type=ID)? ('ref' interactionIdent=ID ('strict')?)?
	'"' 'as' name=ID 
;

UnnamedParticipant returns Participant:
	{UnnamedParticipant} '"'name=ID ('['selector=ID']')? (':' type=ID)? ('ref' interactionIdent=ID ('strict')?)? '"'
;
AnonymousParticipant returns Participant:
	{AnonymousParticipant} '":' type = ID ('ref' interactionIdent=ID ('strict')?)?'"' ('as' name=ID)?
;


// Attention: The ParticipantMention rules output value is converted by
// a custom ValueConverter and all Double-Quotes and Spaces are removed
// so that the output can match a name of a referenced Participant.
ParticipantMention:
	ID | '":' ID '"' | '"' ID '"'
;
	
enum ParticipantShape:
	ACTOR='actor' 
	| BOUNDARY='boundary' 
	| CONTROL='control' 
	| COLLECTIONS='collections' 
	| ENTITY='entity'
	| DATABASE='database'
	| PARTICIPANT='participant';
	
// Messages
	
MessageDefinition:
	RequestMessageDefinition
	| ReplyMessageDefinition;
	

	
RequestMessageDefinition:
	(sender=[Participant|ParticipantMention] arrow=(RightRequest)  receiver=[Participant|ParticipantMention] ) (':' message=RequestMessage)
	| (receiver=[Participant|ParticipantMention] arrow=(LeftRequest) sender=[Participant|ParticipantMention]) (':' message=RequestMessage);
	
ReplyMessageDefinition:
	(sender=[Participant|ParticipantMention] arrow=RightReply receiver=[Participant|ParticipantMention]) (':' message=ReplyMessage)
	| (receiver=[Participant|ParticipantMention] arrow=LeftReply sender=[Participant|ParticipantMention]) (':' message=ReplyMessage);
	
// TODO: Handle \"	
RequestMessage:
	name=ID ('('(arguments+=RequestMessageArgument (',' arguments+=RequestMessageArgument)*)?')')?;	

RequestMessageArgument:
	value=Value
	| name=ID "=" value=Value 
	;
	
ReplyMessage:
	(variable=ID "=")? name=ID ('('(arguments+=ReplyMessageArgument (',' arguments+=ReplyMessageArgument)*)?')')? (':' value=Value)?
	;
	
ReplyMessageArgument:
	name=ID ("=" outParamName=ID)? ":" value=Value 
	;
	 
terminal SIGNED_INT returns ecore::EDouble:
	('-' | '+') INT
;

terminal SIGNED_REAL returns ecore::EDouble:
	('-' | '+')? INT '.' INT (('e' | 'E') ('+' | '-')?  INT)? |
	('-' | '+')? INT ('e' | 'E') ('+' | '-')?  INT
;
Value:
	{LiteralInteger} value = INT
	| {LiteralString} value = STRING
	| {LiteralBoolean} value = BOOLEAN
	| {LiteralReal} value = (SIGNED_REAL | SIGNED_INT)
	| {LiteralNull} 'null'
	| {LiteralUnlimitedNatural} value = '*'
	;

terminal BOOLEAN returns ecore::EBoolean:
	'true'  | 'false'
;

enum RequestArrow:
	RIGHT_SYNC
	| RIGHT_ASYNC
	| LEFT_SYNC
	| LEFT_ASYNC;

enum RightRequest returns RequestArrow:
	RIGHT_SYNC='->'
	| RIGHT_ASYNC='->>';

enum LeftRequest returns RequestArrow:
	LEFT_SYNC='<-'
	| LEFT_ASYNC='<<-';
	
enum ReplyArrow:
	RIGHT_REPLY
	| LEFT_REPLY;
	
enum RightReply returns ReplyArrow:
	RIGHT_REPLY='-->>';
	
enum LeftReply returns ReplyArrow:
	LEFT_REPLY='<<--'
;

// Title

TitleDefinition:
	'title' (('"' (titleParts += ID)+ '"') | (titleParts += ID)+);


// TODO: Handle Strings correctly
@Override
terminal STRING:
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
		;
	
	