/*
 * generated by Xtext 2.25.0
 */
package elite.mdd.plantuml.formatting2;

import elite.mdd.plantuml.plantUML.Diagram;
import elite.mdd.plantuml.plantUML.Participant;
import elite.mdd.plantuml.plantUML.ParticipantDefinition;
import elite.mdd.plantuml.plantUML.SequenceElement;

import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.formatting2.AbstractJavaFormatter;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;

import static elite.mdd.plantuml.plantUML.PlantUMLPackage.Literals;

public class PlantUMLFormatter extends AbstractJavaFormatter {
	
	// See https://hub.packtpub.com/customizing-xtext-components/
	// See https://stackoverflow.com/questions/50904789/formatting-string-content-xtext-2-14
	
	
	public void configureFormatting(FormattingConfig c) {
		c.setNoSpace().around(null);;
	}

	protected void format(Diagram diagram, IFormattableDocument doc) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.	
		for (SequenceElement sequenceElement : diagram.getElements()) {
			doc.prepend(sequenceElement, this::newLine);
			doc.format(sequenceElement);
			doc.append(sequenceElement, this::newLine);
		}
	}

	protected void format(ParticipantDefinition participantDefinition, IFormattableDocument doc) {
		doc.surround(regionFor(participantDefinition).feature(Literals.PARTICIPANT__NAME), this::noSpace);
		doc.format(participantDefinition.getParticipant());
	}
	
	protected void format(Participant participant, IFormattableDocument doc) {
		doc.surround(regionFor(participant).feature(Literals.PARTICIPANT__NAME), this::noSpace);
	}
	
	// TODO: implement for RequestMessageDefinition
}
