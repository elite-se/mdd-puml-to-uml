/*
 * generated by Xtext 2.25.0
 */
package elite.mdd.plantuml.serializer;

import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

import com.google.inject.Inject;

import elite.mdd.plantuml.plantUML.AnonymousParticipant;
import elite.mdd.plantuml.plantUML.NamedParticipant;
import elite.mdd.plantuml.plantUML.Participant;
import elite.mdd.plantuml.plantUML.PlantUMLFactory;
import elite.mdd.plantuml.plantUML.PlantUMLPackage;
import elite.mdd.plantuml.plantUML.QuotedAnonymousParticipant;
import elite.mdd.plantuml.plantUML.QuotedNamedParticipant;
import elite.mdd.plantuml.plantUML.QuotedUnnamedParticipant;
import elite.mdd.plantuml.plantUML.ReplyMessage;
import elite.mdd.plantuml.plantUML.RequestMessage;
import elite.mdd.plantuml.plantUML.UnnamedParticipant;
import elite.mdd.plantuml.plantUML.impl.PlantUMLFactoryImpl;
import elite.mdd.plantuml.plantUML.impl.QuotedNamedParticipantImpl;
import elite.mdd.plantuml.services.PlantUMLGrammarAccess;

public class PlantUMLSemanticSequencer extends AbstractPlantUMLSemanticSequencer {
	
	// private PlantUMLFactory factory = PlantUMLFactoryImpl.init();
	
	private SpecialCharacters specialCharMapper = new SpecialCharacters();
	
	@Override
	protected void sequence_NamedParticipant(ISerializationContext context, NamedParticipant semanticObject) {
		/*QuotedNamedParticipant participant = factory.createQuotedNamedParticipant();
		participant.setInteractionIdent(semanticObject.getInteractionIdent());
		participant.setLabel(semanticObject.getLabel());
		participant.setName(semanticObject.getName());
		participant.setSelector(semanticObject.getSelector());
		participant.setType(semanticObject.getType());*/
		// label=ID ('['selector=ID']')? (':' type=ID)? ('ref' interactionIdent=ID ('strict')?)? 'as' name=ID 
		semanticObject.setLabel(specialCharMapper.mapping.get("\"") + semanticObject.getLabel());
		if (semanticObject.getInteractionIdent() != null) {
			System.out.println("Since semanticObject is not null and Xtext does not allow to modify constants like strict. This may generate an error, please be on the lookout for this.");
			semanticObject.setInteractionIdent(semanticObject.getInteractionIdent() + specialCharMapper.mapping.get("\""));
		} else {
			if (semanticObject.getType() != null) {
				semanticObject.setType(semanticObject.getType() + specialCharMapper.mapping.get("\""));
			} else {
				if (semanticObject.getSelector() != null) {
					semanticObject.setSelector(semanticObject.getSelector() + specialCharMapper.mapping.get("\""));
				} else {
					semanticObject.setLabel(semanticObject.getLabel() + specialCharMapper.mapping.get("\""));
				}
			}
		}
		
		super.sequence_NamedParticipant(context, semanticObject);
	}
	
	
	@Override
	protected void sequence_UnnamedParticipant(ISerializationContext context, UnnamedParticipant semanticObject) {
		String endString = specialCharMapper.mapping.get("\"") + specialCharMapper.mapping.get(" as ") + semanticObject.getName();
		semanticObject.setName(specialCharMapper.mapping.get("\"") + semanticObject.getName());
		if (semanticObject.getInteractionIdent() != null) {
			System.out.println("Since semanticObject is not null and Xtext does not allow to modify constants like strict. This may generate an error, please be on the lookout for this.");
			semanticObject.setInteractionIdent(semanticObject.getInteractionIdent() + endString);
		} else {
			if (semanticObject.getType() != null) {
				semanticObject.setType(semanticObject.getType() + endString);
			} else {
				if (semanticObject.getSelector() != null) {
					semanticObject.setSelector(semanticObject.getSelector() + endString);
				} else {
					semanticObject.setName(semanticObject.getName() + endString);
				}
			}
		}
		
		super.sequence_UnnamedParticipant(context, semanticObject);
	}
	
	@Override
	protected void sequence_AnonymousParticipant(ISerializationContext context, AnonymousParticipant semanticObject) {
		semanticObject.setType(specialCharMapper.mapping.get("\"") + semanticObject.getType());
		System.out.println("Since semanticObject is not null and Xtext does not allow to modify constants like :. This may generate an error, please be on the lookout for this.");
		if (semanticObject.getInteractionIdent() != null) {
			System.out.println("Since semanticObject is not null and Xtext does not allow to modify constants like strict. This may generate an error, please be on the lookout for this.");
			semanticObject.setInteractionIdent(semanticObject.getInteractionIdent() + specialCharMapper.mapping.get("\""));
		} else {
			semanticObject.setType(semanticObject.getType() + specialCharMapper.mapping.get("\""));
		}
		
		super.sequence_AnonymousParticipant(context, semanticObject);
	}
	
	
	@Override
	protected void sequence_QuotedUnnamedParticipant(ISerializationContext context, QuotedUnnamedParticipant semanticObject) {
		String endString = specialCharMapper.mapping.get("\"") + specialCharMapper.mapping.get(" as ") + semanticObject.getName();
		if (semanticObject.getInteractionIdent() != null) {
			System.out.println("Since semanticObject is not null and Xtext does not allow to modify constants like strict. This may generate an error, please be on the lookout for this.");
			semanticObject.setInteractionIdent(semanticObject.getInteractionIdent() + endString);
		} else {
			if (semanticObject.getType() != null) {
				semanticObject.setType(semanticObject.getType() + endString);
			} else {
				if (semanticObject.getSelector() != null) {
					semanticObject.setSelector(semanticObject.getSelector() + endString);
				} else {
					semanticObject.setName(semanticObject.getName() + endString);
				}
			}
		}
		
		super.sequence_QuotedUnnamedParticipant(context, semanticObject);
	}
	
	@Override
	protected void sequence_QuotedAnonymousParticipant(ISerializationContext context, QuotedAnonymousParticipant semanticObject) {		
		super.sequence_QuotedAnonymousParticipant(context, semanticObject);
	}
	
	@Override
	protected void sequence_RequestMessage(ISerializationContext context, RequestMessage semanticObject) {
		if (semanticObject.getArguments().size() == 0) {
			semanticObject.setName(semanticObject.getName() + specialCharMapper.mapping.get("(") + specialCharMapper.mapping.get(")"));
		}
		super.sequence_RequestMessage(context, semanticObject);
	}
	
	@Override
	protected void sequence_ReplyMessage(ISerializationContext context, ReplyMessage semanticObject) {
		if (semanticObject.getArguments().size() == 0) {
			semanticObject.setName(semanticObject.getName() + specialCharMapper.mapping.get("(") + specialCharMapper.mapping.get(")"));
		}
		super.sequence_ReplyMessage(context, semanticObject);
	}
}
